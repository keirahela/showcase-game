--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Server generated by Zap v0.6.25 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number
local outgoing_ids: { number }

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number
local incoming_ids: { number }

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
		outgoing_ids = outgoing_ids,
		incoming_ids = incoming_ids,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
	outgoing_ids: { number },
	incoming_ids: { number },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
	outgoing_ids = data.outgoing_ids
	incoming_ids = data.incoming_ids
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
	outgoing_ids = {}
	incoming_ids = {}
end

load_empty()

local types = {}

local polling_queues_reliable = {}
local polling_queues_unreliable = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		UseAbility = table.freeze({
			On = noop
		}),
		StunUpdate = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		StaminaUpdate = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		ShowFeedback = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		PlayerLeftArena = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		PlayerJoinedArena = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		ParrySuccess = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		Parry = table.freeze({
			On = noop
		}),
		HealthUpdate = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		EndBlock = table.freeze({
			On = noop
		}),
		DamageFeedback = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		Block = table.freeze({
			On = noop
		}),
		Attack = table.freeze({
			On = noop
		}),
		AbilityFeedback = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
	}) :: Events
end
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end

local remotes = ReplicatedStorage:FindFirstChild("ZAP")
if remotes == nil then
	remotes = Instance.new("Folder")
	remotes.Name = "ZAP"
	remotes.Parent = ReplicatedStorage
end

local reliable = remotes:FindFirstChild("ZAP_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "ZAP_RELIABLE"
	reliable.Parent = remotes
end

local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

local function SendEvents()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end

RunService.Heartbeat:Connect(SendEvents)

local reliable_events = table.create(5)
reliable_events[4] = {}
reliable_events[3] = {}
reliable_events[2] = {}
reliable_events[1] = {}
reliable_events[0] = {}
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 4 then
			local value
			for _, cb in reliable_events[4] do
				task.spawn(cb, player, value)
			end
		elseif id == 3 then
			local value
			for _, cb in reliable_events[3] do
				task.spawn(cb, player, value)
			end
		elseif id == 2 then
			local value
			for _, cb in reliable_events[2] do
				task.spawn(cb, player, value)
			end
		elseif id == 1 then
			local value
			for _, cb in reliable_events[1] do
				task.spawn(cb, player, value)
			end
		elseif id == 0 then
			local value
			for _, cb in reliable_events[0] do
				task.spawn(cb, player, value)
			end
		else
			error("Unknown event id")
		end
	end
end)
table.freeze(polling_queues_reliable)
table.freeze(polling_queues_unreliable)

local returns = {
	SendEvents = SendEvents,
	UseAbility = {
		On = function(Callback: (Player: Player) -> ()): () -> ()
			table.insert(reliable_events[4], Callback)
			return function()
				table.remove(reliable_events[4], table.find(reliable_events[4], Callback))
			end
		end,
	},
	StunUpdate = {
		Fire = function(Player: Player, isStunned: (boolean))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local bool_1 = 0
			local bool_1_pos_1 = alloc(1)
			if isStunned then
				bool_1 = bit32.bor(bool_1, 0b0000000000000001)
			end
			buffer.writeu8(outgoing_buff, bool_1_pos_1, bool_1)
			player_map[Player] = save()
		end,
		FireAll = function(isStunned: (boolean))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local bool_2 = 0
			local bool_2_pos_1 = alloc(1)
			if isStunned then
				bool_2 = bit32.bor(bool_2, 0b0000000000000001)
			end
			buffer.writeu8(outgoing_buff, bool_2_pos_1, bool_2)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, isStunned: (boolean))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local bool_3 = 0
			local bool_3_pos_1 = alloc(1)
			if isStunned then
				bool_3 = bit32.bor(bool_3, 0b0000000000000001)
			end
			buffer.writeu8(outgoing_buff, bool_3_pos_1, bool_3)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, isStunned: (boolean))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local bool_4 = 0
			local bool_4_pos_1 = alloc(1)
			if isStunned then
				bool_4 = bit32.bor(bool_4, 0b0000000000000001)
			end
			buffer.writeu8(outgoing_buff, bool_4_pos_1, bool_4)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, isStunned: (boolean))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local bool_5 = 0
			local bool_5_pos_1 = alloc(1)
			if isStunned then
				bool_5 = bit32.bor(bool_5, 0b0000000000000001)
			end
			buffer.writeu8(outgoing_buff, bool_5_pos_1, bool_5)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	StaminaUpdate = {
		Fire = function(Player: Player, stamina: (number), maxStamina: (number))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			assert(stamina >= 0, "value is less than 0!")
			assert(stamina <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, stamina)
			assert(maxStamina >= 0, "value is less than 0!")
			assert(maxStamina <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, maxStamina)
			player_map[Player] = save()
		end,
		FireAll = function(stamina: (number), maxStamina: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			assert(stamina >= 0, "value is less than 0!")
			assert(stamina <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, stamina)
			assert(maxStamina >= 0, "value is less than 0!")
			assert(maxStamina <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, maxStamina)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, stamina: (number), maxStamina: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			assert(stamina >= 0, "value is less than 0!")
			assert(stamina <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, stamina)
			assert(maxStamina >= 0, "value is less than 0!")
			assert(maxStamina <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, maxStamina)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, stamina: (number), maxStamina: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			assert(stamina >= 0, "value is less than 0!")
			assert(stamina <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, stamina)
			assert(maxStamina >= 0, "value is less than 0!")
			assert(maxStamina <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, maxStamina)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, stamina: (number), maxStamina: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			assert(stamina >= 0, "value is less than 0!")
			assert(stamina <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, stamina)
			assert(maxStamina >= 0, "value is less than 0!")
			assert(maxStamina <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, maxStamina)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	ShowFeedback = {
		Fire = function(Player: Player, message: (string), color: (Color3), duration: (number))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			local len_1 = #message
			assert(len_1 >= 1, "value is less than 1!")
			assert(len_1 <= 800, "value is more than 800!")
			assert(utf8.len(message) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1 - 1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, message, len_1)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, color.R * 255)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, color.G * 255)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, color.B * 255)
			assert(duration >= 0, "value is less than 0!")
			assert(duration <= 60, "value is more than 60!")
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, duration)
			player_map[Player] = save()
		end,
		FireAll = function(message: (string), color: (Color3), duration: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			local len_2 = #message
			assert(len_2 >= 1, "value is less than 1!")
			assert(len_2 <= 800, "value is more than 800!")
			assert(utf8.len(message) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2 - 1)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, message, len_2)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, color.R * 255)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, color.G * 255)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, color.B * 255)
			assert(duration >= 0, "value is less than 0!")
			assert(duration <= 60, "value is more than 60!")
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, duration)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, message: (string), color: (Color3), duration: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			local len_3 = #message
			assert(len_3 >= 1, "value is less than 1!")
			assert(len_3 <= 800, "value is more than 800!")
			assert(utf8.len(message) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_3 - 1)
			alloc(len_3)
			buffer.writestring(outgoing_buff, outgoing_apos, message, len_3)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, color.R * 255)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, color.G * 255)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, color.B * 255)
			assert(duration >= 0, "value is less than 0!")
			assert(duration <= 60, "value is more than 60!")
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, duration)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, message: (string), color: (Color3), duration: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			local len_4 = #message
			assert(len_4 >= 1, "value is less than 1!")
			assert(len_4 <= 800, "value is more than 800!")
			assert(utf8.len(message) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_4 - 1)
			alloc(len_4)
			buffer.writestring(outgoing_buff, outgoing_apos, message, len_4)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, color.R * 255)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, color.G * 255)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, color.B * 255)
			assert(duration >= 0, "value is less than 0!")
			assert(duration <= 60, "value is more than 60!")
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, duration)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, message: (string), color: (Color3), duration: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			local len_5 = #message
			assert(len_5 >= 1, "value is less than 1!")
			assert(len_5 <= 800, "value is more than 800!")
			assert(utf8.len(message) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_5 - 1)
			alloc(len_5)
			buffer.writestring(outgoing_buff, outgoing_apos, message, len_5)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, color.R * 255)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, color.G * 255)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, color.B * 255)
			assert(duration >= 0, "value is less than 0!")
			assert(duration <= 60, "value is more than 60!")
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, duration)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	PlayerLeftArena = {
		Fire = function(Player: Player, player: (Instance), arenaName: (string))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			table.insert(outgoing_inst, player)
			local len_6 = #arenaName
			assert(len_6 >= 1, "value is less than 1!")
			assert(len_6 <= 200, "value is more than 200!")
			assert(utf8.len(arenaName) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_6 - 1)
			alloc(len_6)
			buffer.writestring(outgoing_buff, outgoing_apos, arenaName, len_6)
			player_map[Player] = save()
		end,
		FireAll = function(player: (Instance), arenaName: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			table.insert(outgoing_inst, player)
			local len_7 = #arenaName
			assert(len_7 >= 1, "value is less than 1!")
			assert(len_7 <= 200, "value is more than 200!")
			assert(utf8.len(arenaName) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_7 - 1)
			alloc(len_7)
			buffer.writestring(outgoing_buff, outgoing_apos, arenaName, len_7)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, player: (Instance), arenaName: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			table.insert(outgoing_inst, player)
			local len_8 = #arenaName
			assert(len_8 >= 1, "value is less than 1!")
			assert(len_8 <= 200, "value is more than 200!")
			assert(utf8.len(arenaName) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_8 - 1)
			alloc(len_8)
			buffer.writestring(outgoing_buff, outgoing_apos, arenaName, len_8)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, player: (Instance), arenaName: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			table.insert(outgoing_inst, player)
			local len_9 = #arenaName
			assert(len_9 >= 1, "value is less than 1!")
			assert(len_9 <= 200, "value is more than 200!")
			assert(utf8.len(arenaName) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_9 - 1)
			alloc(len_9)
			buffer.writestring(outgoing_buff, outgoing_apos, arenaName, len_9)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, player: (Instance), arenaName: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			table.insert(outgoing_inst, player)
			local len_10 = #arenaName
			assert(len_10 >= 1, "value is less than 1!")
			assert(len_10 <= 200, "value is more than 200!")
			assert(utf8.len(arenaName) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_10 - 1)
			alloc(len_10)
			buffer.writestring(outgoing_buff, outgoing_apos, arenaName, len_10)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	PlayerJoinedArena = {
		Fire = function(Player: Player, player: (Instance), arenaName: (string))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			table.insert(outgoing_inst, player)
			local len_11 = #arenaName
			assert(len_11 >= 1, "value is less than 1!")
			assert(len_11 <= 200, "value is more than 200!")
			assert(utf8.len(arenaName) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_11 - 1)
			alloc(len_11)
			buffer.writestring(outgoing_buff, outgoing_apos, arenaName, len_11)
			player_map[Player] = save()
		end,
		FireAll = function(player: (Instance), arenaName: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			table.insert(outgoing_inst, player)
			local len_12 = #arenaName
			assert(len_12 >= 1, "value is less than 1!")
			assert(len_12 <= 200, "value is more than 200!")
			assert(utf8.len(arenaName) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_12 - 1)
			alloc(len_12)
			buffer.writestring(outgoing_buff, outgoing_apos, arenaName, len_12)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, player: (Instance), arenaName: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			table.insert(outgoing_inst, player)
			local len_13 = #arenaName
			assert(len_13 >= 1, "value is less than 1!")
			assert(len_13 <= 200, "value is more than 200!")
			assert(utf8.len(arenaName) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_13 - 1)
			alloc(len_13)
			buffer.writestring(outgoing_buff, outgoing_apos, arenaName, len_13)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, player: (Instance), arenaName: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			table.insert(outgoing_inst, player)
			local len_14 = #arenaName
			assert(len_14 >= 1, "value is less than 1!")
			assert(len_14 <= 200, "value is more than 200!")
			assert(utf8.len(arenaName) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_14 - 1)
			alloc(len_14)
			buffer.writestring(outgoing_buff, outgoing_apos, arenaName, len_14)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, player: (Instance), arenaName: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			table.insert(outgoing_inst, player)
			local len_15 = #arenaName
			assert(len_15 >= 1, "value is less than 1!")
			assert(len_15 <= 200, "value is more than 200!")
			assert(utf8.len(arenaName) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_15 - 1)
			alloc(len_15)
			buffer.writestring(outgoing_buff, outgoing_apos, arenaName, len_15)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	ParrySuccess = {
		Fire = function(Player: Player, success: (boolean), target: (Instance))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local bool_6 = 0
			local bool_6_pos_1 = alloc(1)
			if success then
				bool_6 = bit32.bor(bool_6, 0b0000000000000001)
			end
			table.insert(outgoing_inst, target)
			buffer.writeu8(outgoing_buff, bool_6_pos_1, bool_6)
			player_map[Player] = save()
		end,
		FireAll = function(success: (boolean), target: (Instance))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local bool_7 = 0
			local bool_7_pos_1 = alloc(1)
			if success then
				bool_7 = bit32.bor(bool_7, 0b0000000000000001)
			end
			table.insert(outgoing_inst, target)
			buffer.writeu8(outgoing_buff, bool_7_pos_1, bool_7)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, success: (boolean), target: (Instance))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local bool_8 = 0
			local bool_8_pos_1 = alloc(1)
			if success then
				bool_8 = bit32.bor(bool_8, 0b0000000000000001)
			end
			table.insert(outgoing_inst, target)
			buffer.writeu8(outgoing_buff, bool_8_pos_1, bool_8)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, success: (boolean), target: (Instance))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local bool_9 = 0
			local bool_9_pos_1 = alloc(1)
			if success then
				bool_9 = bit32.bor(bool_9, 0b0000000000000001)
			end
			table.insert(outgoing_inst, target)
			buffer.writeu8(outgoing_buff, bool_9_pos_1, bool_9)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, success: (boolean), target: (Instance))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local bool_10 = 0
			local bool_10_pos_1 = alloc(1)
			if success then
				bool_10 = bit32.bor(bool_10, 0b0000000000000001)
			end
			table.insert(outgoing_inst, target)
			buffer.writeu8(outgoing_buff, bool_10_pos_1, bool_10)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	Parry = {
		On = function(Callback: (Player: Player) -> ()): () -> ()
			table.insert(reliable_events[3], Callback)
			return function()
				table.remove(reliable_events[3], table.find(reliable_events[3], Callback))
			end
		end,
	},
	HealthUpdate = {
		Fire = function(Player: Player, health: (number), maxHealth: (number))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			assert(health >= 0, "value is less than 0!")
			assert(health <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, health)
			assert(maxHealth >= 0, "value is less than 0!")
			assert(maxHealth <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, maxHealth)
			player_map[Player] = save()
		end,
		FireAll = function(health: (number), maxHealth: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			assert(health >= 0, "value is less than 0!")
			assert(health <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, health)
			assert(maxHealth >= 0, "value is less than 0!")
			assert(maxHealth <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, maxHealth)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, health: (number), maxHealth: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			assert(health >= 0, "value is less than 0!")
			assert(health <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, health)
			assert(maxHealth >= 0, "value is less than 0!")
			assert(maxHealth <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, maxHealth)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, health: (number), maxHealth: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			assert(health >= 0, "value is less than 0!")
			assert(health <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, health)
			assert(maxHealth >= 0, "value is less than 0!")
			assert(maxHealth <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, maxHealth)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, health: (number), maxHealth: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			assert(health >= 0, "value is less than 0!")
			assert(health <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, health)
			assert(maxHealth >= 0, "value is less than 0!")
			assert(maxHealth <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, maxHealth)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	EndBlock = {
		On = function(Callback: (Player: Player) -> ()): () -> ()
			table.insert(reliable_events[2], Callback)
			return function()
				table.remove(reliable_events[2], table.find(reliable_events[2], Callback))
			end
		end,
	},
	DamageFeedback = {
		Fire = function(Player: Player, damage: (number), target: (Instance))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			assert(damage >= 0, "value is less than 0!")
			assert(damage <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, damage)
			table.insert(outgoing_inst, target)
			player_map[Player] = save()
		end,
		FireAll = function(damage: (number), target: (Instance))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			assert(damage >= 0, "value is less than 0!")
			assert(damage <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, damage)
			table.insert(outgoing_inst, target)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, damage: (number), target: (Instance))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			assert(damage >= 0, "value is less than 0!")
			assert(damage <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, damage)
			table.insert(outgoing_inst, target)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, damage: (number), target: (Instance))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			assert(damage >= 0, "value is less than 0!")
			assert(damage <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, damage)
			table.insert(outgoing_inst, target)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, damage: (number), target: (Instance))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			assert(damage >= 0, "value is less than 0!")
			assert(damage <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, damage)
			table.insert(outgoing_inst, target)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	Block = {
		On = function(Callback: (Player: Player) -> ()): () -> ()
			table.insert(reliable_events[1], Callback)
			return function()
				table.remove(reliable_events[1], table.find(reliable_events[1], Callback))
			end
		end,
	},
	Attack = {
		On = function(Callback: (Player: Player) -> ()): () -> ()
			table.insert(reliable_events[0], Callback)
			return function()
				table.remove(reliable_events[0], table.find(reliable_events[0], Callback))
			end
		end,
	},
	AbilityFeedback = {
		Fire = function(Player: Player, damage: (number), targets: ({ (Instance) }))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			assert(damage >= 0, "value is less than 0!")
			assert(damage <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, damage)
			local len_16 = #targets
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_16)
			for i_1 = 1, len_16 do
				local val_1 = targets[i_1]
				table.insert(outgoing_inst, val_1)
			end
			player_map[Player] = save()
		end,
		FireAll = function(damage: (number), targets: ({ (Instance) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			assert(damage >= 0, "value is less than 0!")
			assert(damage <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, damage)
			local len_17 = #targets
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_17)
			for i_2 = 1, len_17 do
				local val_2 = targets[i_2]
				table.insert(outgoing_inst, val_2)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, damage: (number), targets: ({ (Instance) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			assert(damage >= 0, "value is less than 0!")
			assert(damage <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, damage)
			local len_18 = #targets
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_18)
			for i_3 = 1, len_18 do
				local val_3 = targets[i_3]
				table.insert(outgoing_inst, val_3)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, damage: (number), targets: ({ (Instance) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			assert(damage >= 0, "value is less than 0!")
			assert(damage <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, damage)
			local len_19 = #targets
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_19)
			for i_4 = 1, len_19 do
				local val_4 = targets[i_4]
				table.insert(outgoing_inst, val_4)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, damage: (number), targets: ({ (Instance) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			assert(damage >= 0, "value is less than 0!")
			assert(damage <= 255, "value is more than 255!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, damage)
			local len_20 = #targets
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_20)
			for i_5 = 1, len_20 do
				local val_5 = targets[i_5]
				table.insert(outgoing_inst, val_5)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
}
type Events = typeof(returns)
return returns
