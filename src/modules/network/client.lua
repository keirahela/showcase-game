--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Client generated by Zap v0.6.25 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number
local outgoing_ids: { number }

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number
local incoming_ids: { number }

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
		outgoing_ids = outgoing_ids,
		incoming_ids = incoming_ids,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
	outgoing_ids: { number },
	incoming_ids: { number },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
	outgoing_ids = data.outgoing_ids
	incoming_ids = data.incoming_ids
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
	outgoing_ids = {}
	incoming_ids = {}
end

load_empty()

local types = {}

local polling_queues_reliable = {}
local polling_queues_unreliable = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		UseAbility = table.freeze({
			Fire = noop
		}),
		StunUpdate = table.freeze({
			On = noop
		}),
		StaminaUpdate = table.freeze({
			On = noop
		}),
		ShowFeedback = table.freeze({
			On = noop
		}),
		PlayerLeftArena = table.freeze({
			On = noop
		}),
		PlayerJoinedArena = table.freeze({
			On = noop
		}),
		ParrySuccess = table.freeze({
			On = noop
		}),
		Parry = table.freeze({
			Fire = noop
		}),
		HealthUpdate = table.freeze({
			On = noop
		}),
		EndBlock = table.freeze({
			Fire = noop
		}),
		DamageFeedback = table.freeze({
			On = noop
		}),
		Block = table.freeze({
			Fire = noop
		}),
		Attack = table.freeze({
			Fire = noop
		}),
		AbilityFeedback = table.freeze({
			On = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local remotes = ReplicatedStorage:WaitForChild("ZAP")

local reliable = remotes:WaitForChild("ZAP_RELIABLE")
assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")


local function SendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(SendEvents)

local reliable_events = table.create(9)
local reliable_event_queue: { [number]: { any } } = table.create(9)
reliable_events[5] = {}
reliable_event_queue[5] = {}
reliable_events[4] = {}
reliable_event_queue[4] = {}
reliable_events[8] = {}
reliable_event_queue[8] = {}
reliable_events[7] = {}
reliable_event_queue[7] = {}
reliable_events[6] = {}
reliable_event_queue[6] = {}
reliable_events[1] = {}
reliable_event_queue[1] = {}
reliable_events[3] = {}
reliable_event_queue[3] = {}
reliable_events[0] = {}
reliable_event_queue[0] = {}
reliable_events[2] = {}
reliable_event_queue[2] = {}
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 5 then
			local value
			local bool_1 = buffer.readu8(incoming_buff, read(1))
			value = bit32.btest(bool_1, 0b0000000000000001)
			if reliable_events[5][1] then
				for _, cb in reliable_events[5] do
					task.spawn(cb, value)
				end
			else
				table.insert(reliable_event_queue[5], value)
				if #reliable_event_queue[5] > 64 then
					warn(`[ZAP] {#reliable_event_queue[5]} events in queue for StunUpdate. Did you forget to attach a listener?`)
				end
			end
		elseif id == 4 then
			local value, value2
			value = buffer.readu8(incoming_buff, read(1))
			assert(value >= 0, "value is less than 0!")
			assert(value <= 255, "value is more than 255!")
			value2 = buffer.readu8(incoming_buff, read(1))
			assert(value2 >= 0, "value is less than 0!")
			assert(value2 <= 255, "value is more than 255!")
			if reliable_events[4][1] then
				for _, cb in reliable_events[4] do
					task.spawn(cb, value, value2)
				end
			else
				table.insert(reliable_event_queue[4], { value, value2 })
				if #reliable_event_queue[4] > 64 then
					warn(`[ZAP] {#reliable_event_queue[4]} events in queue for StaminaUpdate. Did you forget to attach a listener?`)
				end
			end
		elseif id == 8 then
			local value, value2, value3
			local len_1 = buffer.readu16(incoming_buff, read(2)) + 1
			assert(len_1 >= 1, "value is less than 1!")
			assert(len_1 <= 800, "value is more than 800!")
			value = buffer.readstring(incoming_buff, read(len_1), len_1)
			assert(utf8.len(value) ~= nil, "value is not valid utf-8")
			value2 = Color3.fromRGB(buffer.readu8(incoming_buff, read(1)), buffer.readu8(incoming_buff, read(1)), buffer.readu8(incoming_buff, read(1)))
			value3 = buffer.readf32(incoming_buff, read(4))
			assert(value3 >= 0, "value is less than 0!")
			assert(value3 <= 60, "value is more than 60!")
			if reliable_events[8][1] then
				for _, cb in reliable_events[8] do
					task.spawn(cb, value, value2, value3)
				end
			else
				table.insert(reliable_event_queue[8], { value, value2, value3 })
				if #reliable_event_queue[8] > 64 then
					warn(`[ZAP] {#reliable_event_queue[8]} events in queue for ShowFeedback. Did you forget to attach a listener?`)
				end
			end
		elseif id == 7 then
			local value, value2
			incoming_ipos = incoming_ipos + 1
			value = incoming_inst[incoming_ipos]
			assert(value ~= nil, "received instance is nil!")
			local len_2 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_2 >= 1, "value is less than 1!")
			assert(len_2 <= 200, "value is more than 200!")
			value2 = buffer.readstring(incoming_buff, read(len_2), len_2)
			assert(utf8.len(value2) ~= nil, "value is not valid utf-8")
			if reliable_events[7][1] then
				for _, cb in reliable_events[7] do
					task.spawn(cb, value, value2)
				end
			else
				table.insert(reliable_event_queue[7], { value, value2 })
				if #reliable_event_queue[7] > 64 then
					warn(`[ZAP] {#reliable_event_queue[7]} events in queue for PlayerLeftArena. Did you forget to attach a listener?`)
				end
			end
		elseif id == 6 then
			local value, value2
			incoming_ipos = incoming_ipos + 1
			value = incoming_inst[incoming_ipos]
			assert(value ~= nil, "received instance is nil!")
			local len_3 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_3 >= 1, "value is less than 1!")
			assert(len_3 <= 200, "value is more than 200!")
			value2 = buffer.readstring(incoming_buff, read(len_3), len_3)
			assert(utf8.len(value2) ~= nil, "value is not valid utf-8")
			if reliable_events[6][1] then
				for _, cb in reliable_events[6] do
					task.spawn(cb, value, value2)
				end
			else
				table.insert(reliable_event_queue[6], { value, value2 })
				if #reliable_event_queue[6] > 64 then
					warn(`[ZAP] {#reliable_event_queue[6]} events in queue for PlayerJoinedArena. Did you forget to attach a listener?`)
				end
			end
		elseif id == 1 then
			local value, value2
			local bool_2 = buffer.readu8(incoming_buff, read(1))
			value = bit32.btest(bool_2, 0b0000000000000001)
			incoming_ipos = incoming_ipos + 1
			value2 = incoming_inst[incoming_ipos]
			assert(value2 ~= nil, "received instance is nil!")
			if reliable_events[1][1] then
				for _, cb in reliable_events[1] do
					task.spawn(cb, value, value2)
				end
			else
				table.insert(reliable_event_queue[1], { value, value2 })
				if #reliable_event_queue[1] > 64 then
					warn(`[ZAP] {#reliable_event_queue[1]} events in queue for ParrySuccess. Did you forget to attach a listener?`)
				end
			end
		elseif id == 3 then
			local value, value2
			value = buffer.readu8(incoming_buff, read(1))
			assert(value >= 0, "value is less than 0!")
			assert(value <= 255, "value is more than 255!")
			value2 = buffer.readu8(incoming_buff, read(1))
			assert(value2 >= 0, "value is less than 0!")
			assert(value2 <= 255, "value is more than 255!")
			if reliable_events[3][1] then
				for _, cb in reliable_events[3] do
					task.spawn(cb, value, value2)
				end
			else
				table.insert(reliable_event_queue[3], { value, value2 })
				if #reliable_event_queue[3] > 64 then
					warn(`[ZAP] {#reliable_event_queue[3]} events in queue for HealthUpdate. Did you forget to attach a listener?`)
				end
			end
		elseif id == 0 then
			local value, value2
			value = buffer.readu8(incoming_buff, read(1))
			assert(value >= 0, "value is less than 0!")
			assert(value <= 255, "value is more than 255!")
			incoming_ipos = incoming_ipos + 1
			value2 = incoming_inst[incoming_ipos]
			assert(value2 ~= nil, "received instance is nil!")
			if reliable_events[0][1] then
				for _, cb in reliable_events[0] do
					task.spawn(cb, value, value2)
				end
			else
				table.insert(reliable_event_queue[0], { value, value2 })
				if #reliable_event_queue[0] > 64 then
					warn(`[ZAP] {#reliable_event_queue[0]} events in queue for DamageFeedback. Did you forget to attach a listener?`)
				end
			end
		elseif id == 2 then
			local value, value2
			value = buffer.readu8(incoming_buff, read(1))
			assert(value >= 0, "value is less than 0!")
			assert(value <= 255, "value is more than 255!")
			local len_4 = buffer.readu16(incoming_buff, read(2))
			value2 = table.create(len_4)
			for i_1 = 1, len_4 do
				local val_1
				incoming_ipos = incoming_ipos + 1
				val_1 = incoming_inst[incoming_ipos]
				assert(val_1 ~= nil, "received instance is nil!")
				value2[i_1] = val_1
			end
			if reliable_events[2][1] then
				for _, cb in reliable_events[2] do
					task.spawn(cb, value, value2)
				end
			else
				table.insert(reliable_event_queue[2], { value, value2 })
				if #reliable_event_queue[2] > 64 then
					warn(`[ZAP] {#reliable_event_queue[2]} events in queue for AbilityFeedback. Did you forget to attach a listener?`)
				end
			end
		else
			error("Unknown event id")
		end
	end
end)
table.freeze(polling_queues_reliable)
table.freeze(polling_queues_unreliable)

local returns = {
	SendEvents = SendEvents,
	UseAbility = {
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
		end,
	},
	StunUpdate = {
		On = function(Callback: (isStunned: (boolean)) -> ())
			table.insert(reliable_events[5], Callback)
			for _, value in reliable_event_queue[5] do
				task.spawn(Callback, value)
			end
			reliable_event_queue[5] = {}
			return function()
				table.remove(reliable_events[5], table.find(reliable_events[5], Callback))
			end
		end,
	},
	StaminaUpdate = {
		On = function(Callback: (stamina: (number), maxStamina: (number)) -> ())
			table.insert(reliable_events[4], Callback)
			for _, value in reliable_event_queue[4] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[4] = {}
			return function()
				table.remove(reliable_events[4], table.find(reliable_events[4], Callback))
			end
		end,
	},
	ShowFeedback = {
		On = function(Callback: (message: (string), color: (Color3), duration: (number)) -> ())
			table.insert(reliable_events[8], Callback)
			for _, value in reliable_event_queue[8] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[8] = {}
			return function()
				table.remove(reliable_events[8], table.find(reliable_events[8], Callback))
			end
		end,
	},
	PlayerLeftArena = {
		On = function(Callback: (player: (Instance), arenaName: (string)) -> ())
			table.insert(reliable_events[7], Callback)
			for _, value in reliable_event_queue[7] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[7] = {}
			return function()
				table.remove(reliable_events[7], table.find(reliable_events[7], Callback))
			end
		end,
	},
	PlayerJoinedArena = {
		On = function(Callback: (player: (Instance), arenaName: (string)) -> ())
			table.insert(reliable_events[6], Callback)
			for _, value in reliable_event_queue[6] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[6] = {}
			return function()
				table.remove(reliable_events[6], table.find(reliable_events[6], Callback))
			end
		end,
	},
	ParrySuccess = {
		On = function(Callback: (success: (boolean), target: (Instance)) -> ())
			table.insert(reliable_events[1], Callback)
			for _, value in reliable_event_queue[1] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[1] = {}
			return function()
				table.remove(reliable_events[1], table.find(reliable_events[1], Callback))
			end
		end,
	},
	Parry = {
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
		end,
	},
	HealthUpdate = {
		On = function(Callback: (health: (number), maxHealth: (number)) -> ())
			table.insert(reliable_events[3], Callback)
			for _, value in reliable_event_queue[3] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[3] = {}
			return function()
				table.remove(reliable_events[3], table.find(reliable_events[3], Callback))
			end
		end,
	},
	EndBlock = {
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
		end,
	},
	DamageFeedback = {
		On = function(Callback: (damage: (number), target: (Instance)) -> ())
			table.insert(reliable_events[0], Callback)
			for _, value in reliable_event_queue[0] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[0] = {}
			return function()
				table.remove(reliable_events[0], table.find(reliable_events[0], Callback))
			end
		end,
	},
	Block = {
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
		end,
	},
	Attack = {
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
		end,
	},
	AbilityFeedback = {
		On = function(Callback: (damage: (number), targets: ({ (Instance) })) -> ())
			table.insert(reliable_events[2], Callback)
			for _, value in reliable_event_queue[2] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[2] = {}
			return function()
				table.remove(reliable_events[2], table.find(reliable_events[2], Callback))
			end
		end,
	},
}
type Events = typeof(returns)
return returns
